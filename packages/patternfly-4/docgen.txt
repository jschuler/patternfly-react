{"description":"","displayName":"ChartArea","methods":[],"props":{"animate":{"required":false,"tsType":{"name":"AnimatePropTypeInterface"},"description":"type: boolean || object\n\nThe animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},"categories":{"required":false,"tsType":{"name":"CategoryPropType"},"description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n@example [\"dogs\", \"cats\", \"mice\"]"},"containerComponent":{"required":false,"tsType":{"name":"ReactReactElement","raw":"React.ReactElement<any>","elements":[{"name":"any"}]},"description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":{"value":"<ChartContainer />","computed":false}},"data":{"required":false,"tsType":{"name":"Array","elements":[{"name":"any"}],"raw":"any[]"},"description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},"dataComponent":{"required":false,"tsType":{"name":"ReactReactElement","raw":"React.ReactElement<any>","elements":[{"name":"any"}]},"description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartArea: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use its default Area component."},"domain":{"required":false,"tsType":{"name":"DomainPropType"},"description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n@example [-1, 1], {x: [0, 100], y: [0, 1]}"},"domainPadding":{"required":false,"tsType":{"name":"DomainPaddingPropType"},"description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y."},"eventKey":{"required":false,"tsType":{"name":"StringOrNumberOrCallback"},"description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},"events":{"required":false,"tsType":{"name":"Array","elements":[{"name":"EventPropTypeInterface","elements":[{"name":"union","raw":"'data' | 'labels' | 'parent'","elements":[{"name":"literal","value":"'data'"},{"name":"literal","value":"'labels'"},{"name":"literal","value":"'parent'"}]},{"name":"literal","value":"'all'"}],"raw":"EventPropTypeInterface<'data' | 'labels' | 'parent', 'all'>"}],"raw":"EventPropTypeInterface<'data' | 'labels' | 'parent', 'all'>[]"},"description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartArea events.\nSince ChartArea only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},"externalEventMutations":{"required":false,"tsType":{"name":"Array","elements":[{"name":"any"}],"raw":"any[]"},"description":"ChartArea uses the standard externalEventMutations prop."},"groupComponent":{"required":false,"tsType":{"name":"ReactReactElement","raw":"React.ReactElement<any>","elements":[{"name":"any"}]},"description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},"height":{"required":false,"tsType":{"name":"number"},"description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},"horizontal":{"required":false,"tsType":{"name":"boolean"},"description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},"interpolation":{"required":false,"tsType":{"name":"InterpolationPropType"},"description":"The interpolation prop determines how data points should be connected when plotting a line"},"labelComponent":{"required":false,"tsType":{"name":"ReactReactElement","raw":"React.ReactElement<any>","elements":[{"name":"any"}]},"description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},"labels":{"required":false,"tsType":{"name":"union","raw":"string[] | number[] | Function","elements":[{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"},{"name":"Array","elements":[{"name":"number"}],"raw":"number[]"},{"name":"Function"}]},"description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},"maxDomain":{"required":false,"tsType":{"name":"union","raw":"number | { x?: number; y?: number }","elements":[{"name":"number"},{"name":"signature","type":"object","raw":"{ x?: number; y?: number }","signature":{"properties":[{"key":"x","value":{"name":"number","required":false}},{"key":"y","value":{"name":"number","required":false}}]}}]},"description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nnote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\nexamples:\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},"minDomain":{"required":false,"tsType":{"name":"union","raw":"number | { x?: number; y?: number }","elements":[{"name":"number"},{"name":"signature","type":"object","raw":"{ x?: number; y?: number }","signature":{"properties":[{"key":"x","value":{"name":"number","required":false}},{"key":"y","value":{"name":"number","required":false}}]}}]},"description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nnote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\nexamples:\n\nminDomain={0}\nminDomain={{ y: 0 }}"},"name":{"required":false,"tsType":{"name":"string"},"description":"The name prop is used to reference a component instance when defining shared events."},"origin":{"required":false,"tsType":{"name":"signature","type":"object","raw":"{ x: number; y: number }","signature":{"properties":[{"key":"x","value":{"name":"number","required":true}},{"key":"y","value":{"name":"number","required":true}}]}},"description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n**This prop should not be set manually.**"},"padding":{"required":false,"tsType":{"name":"PaddingProps"},"description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},"polar":{"required":false,"tsType":{"name":"boolean"},"description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart.\n**This prop should not be set manually.**"},"range":{"required":false,"tsType":{"name":"union","raw":"[number, number] | { x?: [number, number]; y?: [number, number] }","elements":[{"name":"tuple","raw":"[number, number]","elements":[{"name":"number"},{"name":"number"}]},{"name":"signature","type":"object","raw":"{ x?: [number, number]; y?: [number, number] }","signature":{"properties":[{"key":"x","value":{"name":"tuple","raw":"[number, number]","elements":[{"name":"number"},{"name":"number"}],"required":false}},{"key":"y","value":{"name":"tuple","raw":"[number, number]","elements":[{"name":"number"},{"name":"number"}],"required":false}}]}}]},"description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\nexamples:\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},"samples":{"required":false,"tsType":{"name":"number"},"description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},"scale":{"required":false,"tsType":{"name":"union","raw":"ScalePropType\n| D3Scale\n| {\n    x?: ScalePropType | D3Scale;\n    y?: ScalePropType | D3Scale;\n  }","elements":[{"name":"ScalePropType"},{"name":"D3Scale"},{"name":"signature","type":"object","raw":"{\n  x?: ScalePropType | D3Scale;\n  y?: ScalePropType | D3Scale;\n}","signature":{"properties":[{"key":"x","value":{"name":"union","raw":"ScalePropType | D3Scale","elements":[{"name":"ScalePropType"},{"name":"D3Scale"}],"required":false}},{"key":"y","value":{"name":"union","raw":"ScalePropType | D3Scale","elements":[{"name":"ScalePropType"},{"name":"D3Scale"}],"required":false}}]}}]},"description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},"sharedEvents":{"required":false,"tsType":{"name":"any"},"description":"The sharedEvents prop is used internally to coordinate events between components. It should not be set manually."},"singleQuadrantDomainPadding":{"required":false,"tsType":{"name":"union","raw":"boolean | { x: boolean; y: boolean }","elements":[{"name":"boolean"},{"name":"signature","type":"object","raw":"{ x: boolean; y: boolean }","signature":{"properties":[{"key":"x","value":{"name":"boolean","required":true}},{"key":"y","value":{"name":"boolean","required":true}}]}}]},"description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nnote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\nexamples:\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},"sortKey":{"required":false,"tsType":{"name":"union","raw":"string | string[] | Function","elements":[{"name":"string"},{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"},{"name":"Function"}]},"description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},"sortOrder":{"required":false,"tsType":{"name":"union","raw":"'ascending' | 'descending'","elements":[{"name":"literal","value":"'ascending'"},{"name":"literal","value":"'descending'"}]},"description":"The sortOrder prop specifies whether sorted data should be returned in ascending or descending order."},"standalone":{"required":false,"tsType":{"name":"boolean"},"description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},"style":{"required":false,"tsType":{"name":"VictoryStyleInterface"},"description":"The style prop specifies styles for your ChartArea. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},"theme":{"required":false,"tsType":{"name":"ChartThemeDefinition"},"description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":{"value":"getTheme(themeColor, themeVariant)","computed":true}},"themeColor":{"required":false,"tsType":{"name":"string"},"description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},"themeVariant":{"required":false,"tsType":{"name":"string"},"description":"Specifies the theme variant. Valid values are 'dark' or 'light'\n\nNote: Not compatible with theme prop\n\n@example themeVariant={ChartThemeVariant.light}"},"width":{"required":false,"tsType":{"name":"number"},"description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},"x":{"required":false,"tsType":{"name":"DataGetterPropType"},"description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},"y":{"required":false,"tsType":{"name":"DataGetterPropType"},"description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},"y0":{"required":false,"tsType":{"name":"DataGetterPropType"},"description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartArea.\nThis prop may be given in a variety of formats.\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}},"composes":["VictoryAreaProps"]}
