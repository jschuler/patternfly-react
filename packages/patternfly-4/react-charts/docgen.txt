{"description":"","displayName":"ChartBulletComparativeMeasure","methods":[],"props":{"allowTooltip":{"required":false,"tsType":{"name":"boolean"},"description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":{"value":"true","computed":false}},"ariaDesc":{"required":false,"tsType":{"name":"string"},"description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},"ariaTitle":{"required":false,"tsType":{"name":"string"},"description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},"barWidth":{"required":false,"tsType":{"name":"NumberOrCallback"},"description":"The barWidth prop is used to specify the width of each bar. This prop may be given as\na number of pixels or as a function that returns a number. When this prop is given as\na function, it will be evaluated with the arguments datum, and active. When this value\nis not given, a default value will be calculated based on the overall dimensions of\nthe chart, and the number of bars.","defaultValue":{"value":"ChartBulletStyles.comparativeMeasureWidth","computed":true}},"constrainToVisibleArea":{"required":false,"tsType":{"name":"boolean"},"description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":{"value":"false","computed":false}},"data":{"required":false,"tsType":{"name":"Array","elements":[{"name":"any"}],"raw":"any[]"},"description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example data={[{ y: 50 }]}"},"domain":{"required":false,"tsType":{"name":"DomainPropType"},"description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n@example {x: [0, 2], y: [0, 100]}\n\nNote: The x domain is expected to be `x: [0, 2]` in order to position all measures properly"},"height":{"required":false,"tsType":{"name":"number"},"description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels","defaultValue":{"value":"theme.bar.height","computed":true}},"horizontal":{"required":false,"tsType":{"name":"boolean"},"description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis.","defaultValue":{"value":"true","computed":false}},"labelComponent":{"required":false,"tsType":{"name":"ReactReactElement","raw":"React.ReactElement<any>","elements":[{"name":"any"}]},"description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the bar. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartBar. If individual labels are required for each\ndata point, they should be created by composing ChartBar with VictoryScatter","defaultValue":{"value":"<ChartTooltip />","computed":false}},"labels":{"required":false,"tsType":{"name":"union","raw":"Function | string[] | number[]","elements":[{"name":"Function"},{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"},{"name":"Array","elements":[{"name":"number"}],"raw":"number[]"}]},"description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{y: 1, label: \"first\"}]}.\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},"measureComponent":{"required":false,"tsType":{"name":"ReactReactElement","raw":"React.ReactElement<any>","elements":[{"name":"any"}]},"description":"The measureComponent prop takes an entire component which will be used to create the chart","defaultValue":{"value":"<ChartBar />","computed":false}},"padding":{"required":false,"tsType":{"name":"PaddingProps"},"description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},"standalone":{"required":false,"tsType":{"name":"boolean"},"description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLine with other components within an enclosing <svg> tag.","defaultValue":{"value":"true","computed":false}},"theme":{"required":false,"tsType":{"name":"ChartThemeDefinition"},"description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLine as a solo component, implement the theme directly on\nChartLine. If you are wrapping ChartLine in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":{"value":"getBulletComparativeMeasureTheme(themeColor, themeVariant)","computed":true}},"themeColor":{"required":false,"tsType":{"name":"string"},"description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},"themeVariant":{"required":false,"tsType":{"name":"string"},"description":"Specifies the theme variant. Valid values are 'dark' or 'light'\n\nNote: Not compatible with theme prop\n\n@example themeVariant={ChartThemeVariant.light}"},"width":{"required":false,"tsType":{"name":"number"},"description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels","defaultValue":{"value":"theme.bar.width","computed":true}},"y":{"required":false,"tsType":{"name":"DataGetterPropType"},"description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}}}
